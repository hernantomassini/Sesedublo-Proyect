<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.BackImage" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>